# CircleCI v2.1 Config
version: 2.1

##
# orbs
#
# Orbs used in this pipeline
##
orbs:
  anchore: anchore/anchore-engine@1.9.0
  slack: circleci/slack@4.12.5 # Ref: https://github.com/mojaloop/ci-config/tree/main/slack-templates
  pr-tools: mojaloop/pr-tools@0.1.10 # Ref: https://github.com/mojaloop/ci-config/
  gh: circleci/github-cli@2.2.0

# this allows you to use CircleCI's dynamic configuration feature
#setup: true

##
# Yaml anchors
#
##
defaults_configure_git: &defaults_configure_git
  name: Configure git
  command: |
    git config user.email ${GIT_CI_EMAIL}
    git config user.name ${GIT_CI_USER}

defaults_npm_auth: &defaults_npm_auth
  name: Update NPM registry auth token
  command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc

##
# Executors
#
# CircleCI Executors
##
executors:
  default-docker:
    working_directory: &workingDirVar /home/circleci/project
    docker:
      - image: mojaloop/node-20.10.0-builder:0.0.2

  default-infra-docker:
    working_directory: &workingDirVar /home/circleci/project
    environment:
      ELASTICSEARCH_URL: http://localhost:9200 # non-SSL

    docker:
      - image: mojaloop/node-20.10.0-builder:0.0.2

      # Infra docker images for the executor
      - image: elasticsearch:8.1.0
        name: elasticsearch
        environment:
          ES_ELASTIC_PASSWORD: elasticSearchPas42
          discovery.type: single-node
          xpack.security.enabled: false
      - image: confluentinc/cp-zookeeper:7.2.1
        name: zookeeper
        environment:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_SERVER_ID: 1
          ZOOKEEPER_SERVERS: 127.0.0.1:2888:3888

      - image: confluentinc/cp-kafka:7.2.1
        name: kafka
        environment:
          KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://0.0.0.0:9092
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
          KAFKA_BROKER_ID: 1
          KAFKA_JMX_PORT: 9999
          KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
          KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
          KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
          KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
          KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
          KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181" # is this correct?

  default-machine:
    machine:
      image: ubuntu-2204:2023.04.2
      docker_layer_caching: true

jobs:
  setup:
    executor: default-docker
    steps:
      - checkout
      - restore_cache:
          keys:
            - node_modules-cache-{{ checksum "package.json" }}
      - run: BUILD_LIBRDKAFKA=0 npm install
      - save_cache:
          paths:
            - node_modules
          key: node_modules-cache-{{ checksum "package.json" }}
      - persist_to_workspace:
          root: *workingDirVar
          paths:
            - .
  build:
    executor: default-docker
    steps:
      - attach_workspace:
          at: *workingDirVar
      - run: npm run build
      - save_cache:
          paths:
            - packages
          key: build-cache-{{ .Environment.CIRCLE_SHA1 }}
      - persist_to_workspace:
          root: *workingDirVar
          paths:
            - .
  lint:
    executor: default-docker
    steps:
      - attach_workspace:
          at: *workingDirVar
      - run: npm run lint

  test-unit:
    executor: default-docker
    steps:
      - attach_workspace:
          at: *workingDirVar
      - run:
          name: Execute unit tests
          command: npm run test:unit
      # store workspace for the coverage-report step
      - persist_to_workspace:
          root: *workingDirVar
          paths:
            - .

  test-integration:
    executor: default-infra-docker
    steps:
      - attach_workspace:
          at: *workingDirVar
      # - run:
      #     name: Install curl
      #     command: |
      #       apk update
      #       apk add curl
      # - run:
      #     name: Wait for Docker services to be ready
      #     command: |
      #       echo "Waiting for Elasticsearch to be ready..."
      #       until curl -s http://localhost:9200/_cluster/health?pretty=true | grep -q 'green'; do
      #         echo "Elasticsearch is not ready yet..."
      #         sleep 5
      #       done
      #       echo "Elasticsearch is ready."
      #
      #       echo "Checking if Kafka is ready..."
      #       # Simple shell TCP connection attempt to Kafka's port
      #       until timeout 1 bash -c "cat < /dev/null > /dev/tcp/localhost/9092"; do
      #         echo "Waiting for Kafka..."
      #         sleep 5
      #       done
      #       echo "Kafka is ready."
      #
      #       echo "All services are ready, proceeding with integration tests."
      - run:
          name: Execute integration tests
          command: npm run test:integration
      # store workspace for the coverage-report step
      - persist_to_workspace:
          root: *workingDirVar
          paths:
            - .

  coverage-report:
    executor: default-docker
    steps:
      - attach_workspace:
          at: *workingDirVar
      - run:
          name: Ensure coverage directory exists (FIXME find better way)
          command: mkdir -p ./coverage
      - run:
          name: Merge json coverage files
          command: npm run coverage:merge
      - run:
          name: Generate coverage report
          command: npm run coverage:gen-report
      - store_artifacts:
          path: coverage

  publish:
    executor: default-machine
    steps:
      - attach_workspace:
          at: *workingDirVar
      - run:
          <<: *defaults_configure_git
      - run:
          name: Add github.com to known hosts
          command: ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          <<: *defaults_npm_auth
      - run:
          name: Configure NPM registry
          command: npm config set registry https://registry.npmjs.org/
      - run:
          name: Detect changes, publishing npm and publish docker images
          no_output_timeout: 30m
          command: chmod +x .circleci/*.sh && .circleci/publish.sh

workflows:
  version: 2
  build_lint_and_test:
    jobs:
      - setup:
          context: org-global
      - build:
          context: org-global
          requires:
            - setup
      - lint:
          context: org-global
          requires:
            - build
      - test-unit:
          context: org-global
          requires:
            - lint
      - test-integration:
          context: org-global
          requires:
            - lint
      - coverage-report:
          context: org-global
          requires:
            - test-unit
      - publish:
          context: org-global
          filters:
            branches:
              only: main
          requires:
            - test-unit
